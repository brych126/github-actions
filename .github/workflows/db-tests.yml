name: Run DB Integration Tests

on:
  workflow_dispatch:
  push:
    paths:
      - 'DatabaseTests/**'

jobs:
  db-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: DatabaseTests

    steps:
      - uses: actions/checkout@v4
      
      - name: Ls
        run: |
         id
         pwd
         ls -l -R .
         echo "**********"
         ls -l -R ${{github.workspace}}

      - name: List docker info
        run: |
         docker version
         docker compose version

      - name: Start SQL Server
        run: |
          #Prepare mount dir with limited access
          mkdir init_output
          chmod 700 init_output

          docker run -d \
            --name sql_server \
            -e "ACCEPT_EULA=Y" \
            -e "SA_PASSWORD=Password1" \
            -v "./scripts:/scripts:ro" \
            -v "./init_output:/init_output" \
            -p 1433:1433 \
            mcr.microsoft.com/mssql/server:2022-latest

      - name: Wait for SQL Server to be ready
        run: |
         sql_ready=false
      
          for i in {1..30}; do
            docker exec sql_server /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P Password1 -Q "SELECT 1" -C && {
              sql_ready=true
              break
            }
            echo "Waiting for SQL Server..."
            sleep 2
          done
          
          echo
          echo "******Summary****"

          if [ "$sql_ready" = false ]; then
            echo "❌ SQL Server is not responding after 30 attempts"
            exit 1
          fi
          
          echo "✅ SQL Server is ready"

      - name: Run DB init script
        run: |
          # 1. Execute db init script
          chmod 703 init_output
          docker exec sql_server /opt/mssql-tools18/bin/sqlcmd \
            -S localhost \
            -U sa \
            -P Password1 \
            -i /scripts/CreateDbStructure.sql \
            -o /init_output/output.txt \
            -C
          chmod 700 init_output

          # 2. Print output
          cat ./init_output/output.txt
      
          # 3. Check for SQL errors
          if grep -q "^Msg " ./init_output/output.txt; then
            echo "❌ Database initialization script contains SQL errors"
            exit 1
          fi

          echo "✅ Database initialization script executed successfully"

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-db-tests-nuget-${{ hashFiles('DatabaseTests/DatabaseTestsAdoNet/DatabaseTestsAdoNet.csproj') }}
          restore-keys: |
            ${{ runner.os }}-db-tests-nuget-

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore ./DatabaseTestsAdoNet

      - name: Build
        run: dotnet build ./DatabaseTestsAdoNet

      - name: Run db tests
        run: dotnet test --logger "console;verbosity=detailed" ./DatabaseTestsAdoNet